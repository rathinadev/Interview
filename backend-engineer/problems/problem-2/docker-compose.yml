version: '3.8'

services:
  # Base services from the interview setup
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: interview_user
      POSTGRES_PASSWORD: interview_password
    ports:
      - "5432:5432"
    networks:
      - microservice_network

  redis:
    image: redis:6
    command: redis-server --requirepass redis_password
    ports:
      - "6379:6379"
    networks:
      - microservice_network

  rabbitmq:
    image: rabbitmq:3.9-management
    ports:
      - "5672:5672"   # For application connection
      - "15672:15672" # For web management UI
    networks:
      - microservice_network

  # Application Microservices
  user_service:
    build: ./user_service
    environment:
      - DATABASE_URL=postgresql://interview_user:interview_password@postgres/user_db
      - JWT_SECRET_KEY=a_very_secret_key
    depends_on:
      - postgres
    networks:
      - microservice_network

  product_service:
    build: ./product_service
    environment:
      - DATABASE_URL=postgresql://interview_user:interview_password@postgres/product_db
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq/
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - microservice_network

  order_service:
    build: ./order_service
    environment:
      - DATABASE_URL=postgresql://interview_user:interview_password@postgres/order_db
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq/
      - PRODUCT_SERVICE_URL=http://product_service:8000
    depends_on:
      - postgres
      - rabbitmq
      - product_service
    networks:
      - microservice_network

  api_gateway:
    build: ./api_gateway
    ports:
      - "8000:8000"
    environment:
      - USER_SERVICE_URL=http://user_service:8000
      - PRODUCT_SERVICE_URL=http://product_service:8000
      - ORDER_SERVICE_URL=http://order_service:8000
      - JWT_SECRET_KEY=a_very_secret_key # Must be the same as User Service
    depends_on:
      - user_service
      - product_service
      - order_service
    networks:
      - microservice_network

networks:
  microservice_network:
    driver: bridge