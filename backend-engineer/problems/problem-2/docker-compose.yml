services:
  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: interview_user
      POSTGRES_PASSWORD: interview_password
    ports:
      - "5432:5432"
    networks:
      - ecomm_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U interview_user"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.9-management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - ecomm_network

  user_service:
    build:
      context: .
      dockerfile: ./user_service/Dockerfile
    environment:
      - PYTHONPATH=/code
      - DATABASE_URL=postgresql://interview_user:interview_password@postgres/user_db
      - JWT_SECRET_KEY=a_very_secret_key_that_is_shared
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecomm_network

  product_service:
    build:
      context: .
      dockerfile: ./product_service/Dockerfile
    environment:
      - PYTHONPATH=/code
      - DATABASE_URL=postgresql://interview_user:interview_password@postgres/product_db
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq/
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    networks:
      - ecomm_network

  order_service:
    build:
      context: .
      dockerfile: ./order_service/Dockerfile
    environment:
      - PYTHONPATH=/code
      - DATABASE_URL=postgresql://interview_user:interview_password@postgres/order_db
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq/
      - PRODUCT_SERVICE_URL=http://product_service:8000
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      product_service:
        condition: service_started
    networks:
      - ecomm_network

  api_gateway:
    build:
      context: .
      dockerfile: ./api_gateway/Dockerfile
    environment:
      - PYTHONPATH=/code
      - USER_SERVICE_URL=http://user_service:8000
      - PRODUCT_SERVICE_URL=http://product_service:8000
      - ORDER_SERVICE_URL=http://order_service:8000
      - JWT_SECRET_KEY=a_very_secret_key_that_is_shared
    ports:
      - "8000:8000"
    depends_on:
      user_service:
        condition: service_started
      product_service:
        condition: service_started
      order_service:
        condition: service_started
    networks:
      - ecomm_network

volumes:
  postgres_data:

networks:
  ecomm_network:
    driver: bridge